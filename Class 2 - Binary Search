// For data sorted in ascending order

const numbersAsc = [10, 20, 30, 40, 50, 60, 80, 90, 110]
const target = 90

function binarySearchAsc( arr, searchVal ) {
    let start = 0
    let end = (arr.length - 1)
    let mid

    while(start <= end) {
        mid = Math.floor((start + end)/ 2)

        if( arr[mid] === searchVal ) return `Found ${searchVal} at index ${mid}`
        else if( arr[mid] < searchVal ) start = mid + 1
        else end = mid - 1
    }

    return `couldn't find ${searchVal} in the array`
}

console.log(binarySearchAsc(numbersAsc, target))


// For data sorted in descending order

const numbersDesc = [105, 95, 85, 78, 67, 43, 32, 27, 13, 6]
const targetVal = 85

function binarySearchDesc( arr, searchVal ) {
    let start = 0
    let end = (arr.length - 1)
    let mid

    while(start <= end) {
        mid = Math.floor((start + end)/ 2)

        if( arr[mid] === searchVal ) return `Found ${searchVal} at index ${mid}`
        else if( searchVal > arr[mid] ) end = mid - 1
        else start = mid + 1
    }

    return `couldn't find ${searchVal} in the array`
}

console.log(binarySearchDesc(numbersDesc, targetVal))

// Order Agnostic Binary Search

// const numbers  = [20, 26, 28, 39, 45, 46, 53, 54, 67, 70, 76, 81, 85, 90, 98]
const numbers  = [125, 120, 115, 110, 105, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55]
const tgValue = 120
const isAsc = numbers[0] < numbers[numbers.length-1]
let mid

function binarySearchOA(arr, searchval){
    let start = 0
    let end = arr.length -1

    if(isAsc) {
        while(start <= end){
            mid = (start + end) / 2

            if(arr[mid] === searchval) return `${arr[mid]} is found at index ${mid}`
                else if(arr[mid] < searchval) start = mid + 1 
                else end = mid - 1
                
        }
    }

    while(start <= end){
        mid = (start + end) / 2
        
        if(arr[mid] === searchval) return `${arr[mid]} is found at index ${mid}`
            else if(arr[mid] > searchval) start = mid + 1 
            else end = mid - 1
    }
}

console.log(binarySearchOA(numbers, tgValue))